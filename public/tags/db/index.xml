<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>DB - 标签 - SszgwDk</title><link>https://sszgwdk.github.io/tags/db/</link><description>DB - 标签 - SszgwDk</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 10 Sep 2024 11:40:35 +0800</lastBuildDate><atom:link href="https://sszgwdk.github.io/tags/db/" rel="self" type="application/rss+xml"/><item><title>CMU15-445 Fall 2023 Task4.2, 4.3 及奖励任务</title><link>https://sszgwdk.github.io/posts/cmu445-final120/</link><pubDate>Tue, 10 Sep 2024 11:40:35 +0800</pubDate><author>SszgwDk</author><guid>https://sszgwdk.github.io/posts/cmu445-final120/</guid><description><![CDATA[<p>Task 4.2 需要重构之前实现的 Insert、Update 和 Delete 算子，主要是增加了两方面的考虑：</p>
<ol>
<li>之前的任务当中一个 Tuple 被删除之后不会再被修改，现在引入了索引支持，在进行插入 Insert 时，如果在索引中查询到该元组已被删除，则应更新已删除的元组，而不是创建新条目，因此现在 Table Heap 当中和 undo_log 中都会出现删除标记，因此相应地要在 Insert、Update、Delete 三个算子当中进行处理。</li>
<li>竞争条件，即如果多个事务同时更新 Version Chain，应该要正确地中止其中一些。Butub 在 version info page 中提供了一个<code>in_progress</code>​ 字段可以表明在当前 tuple 上是否已经有一个正在运行的事务，因此需要借助该字段来避免并发问题。</li>
</ol>
<h2 id="关于-in_progress">关于 in_progress</h2>
<p>写入相关事务调用 GetVersionLink 方法获取最新的 VersionLink后，需要校验它的 in_progress_ 属性，只有当为 false 或者 Version link 为空时才可继续执行，否则视为写冲突抛出异常，直接终止事务。</p>]]></description></item><item><title>CMU15-445 Fall 2023 Project 4</title><link>https://sszgwdk.github.io/posts/cmu445_p4/</link><pubDate>Tue, 10 Sep 2024 11:32:38 +0800</pubDate><author>SszgwDk</author><guid>https://sszgwdk.github.io/posts/cmu445_p4/</guid><description>&lt;p>23 fall 的 Bustub 引入了 MVCC（多版本并发控制），采用 Hyper MVCC 的方法，即使用类似增量表（delta table）的结构，利用 undo logs（撤销日志）和 Version Chain（版本链）实现并发控制。&lt;/p></description></item><item><title>CMU15-445 Fall 2023 Project 3</title><link>https://sszgwdk.github.io/posts/cmu445_p3/</link><pubDate>Sun, 01 Sep 2024 17:48:47 +0800</pubDate><author>SszgwDk</author><guid>https://sszgwdk.github.io/posts/cmu445_p3/</guid><description><![CDATA[<p>Project 3 Query Execution的任务是实现BusTub执行SQL命令的组件。主要分为：</p>
<ol>
<li>执行SQL查询的算子</li>
<li>优化规则的实现</li>
</ol>
<p>Project 3 的难点在于读代码，理解查询引擎的原理，弄懂了之后具体实现起来并不难。</p>]]></description></item><item><title>CMU15-445 Fall 2023 Project 2</title><link>https://sszgwdk.github.io/posts/cmu445_p2/</link><pubDate>Thu, 29 Aug 2024 18:42:20 +0800</pubDate><author>SszgwDk</author><guid>https://sszgwdk.github.io/posts/cmu445_p2/</guid><description><![CDATA[<h2 id="bustub的哈希索引结构">bustub的哈希索引结构</h2>
<p>bustub使用的哈希索引是可扩展哈希的一种变体，在两级方案的基础上添加了一个<code>HeaderPage</code>​，按照文档的说法，这是为了使哈希表可以容纳更多值并有可能实现更好的多线程性能。</p>]]></description></item><item><title>CMU15-445 Fall 2023 Project 1</title><link>https://sszgwdk.github.io/posts/cmu445_p1/</link><pubDate>Thu, 29 Aug 2024 17:54:14 +0800</pubDate><author>SszgwDk</author><guid>https://sszgwdk.github.io/posts/cmu445_p1/</guid><description>&lt;p>Project 1是为Bustub构建一个面向磁盘的缓存管理器（Storage Manager）。&lt;/p>
&lt;p>缓存管理器（也叫缓存池，Buffer Pool）是数据库系统中一个必不可少的组件，可以显著减少数据库的I/O操作，降低数据库负载。在DBMS中，记录是按照行来存储的，但是数据库的读取并不是以行为单位的，否则一次读取（也就是一次 I/O 操作）只能处理一行数据，效率会非常低。Bustub的数据是按页为单位进行读写的，页的大小可以是4KB、8KB、16KB等，是缓存管理的最小单元。&lt;/p></description></item><item><title>CMU15-445 Fall 2023 Project 0</title><link>https://sszgwdk.github.io/posts/cmu445_p0/</link><pubDate>Fri, 23 Aug 2024 18:47:46 +0800</pubDate><author>SszgwDk</author><guid>https://sszgwdk.github.io/posts/cmu445_p0/</guid><description><![CDATA[<p>Project 0是一个C++热身项目。使用的C++的版本是C++17，但是知道C++11的知识点就足够了。</p>
<h2 id="c前置知识">C++前置知识</h2>
<p>从我的编码过程来看，P0主要涉及智能指针、强制类型转换、右值引用和锁管理四个部分的C++知识。</p>]]></description></item><item><title>CMU15-445 Fall 2023 入门</title><link>https://sszgwdk.github.io/posts/cmu445_start/</link><pubDate>Sun, 18 Aug 2024 17:22:41 +0800</pubDate><author>SszgwDk</author><guid>https://sszgwdk.github.io/posts/cmu445_start/</guid><description>&lt;p>作为一名新接触存储领域的学生，我在自学了tinykv之后，感觉自己的基础实在是过于薄弱，对于常见的数据库组件，诸如缓存、索引、事务引擎等，都几乎毫无了解，又感到无从抓起。前段时间刚好在&lt;a href="https://csdiy.wiki/" target="_blank" rel="noopener noreffer ">CS自学指南 (csdiy.wiki)&lt;/a>看到CMU15-445这门课，它的project里面所涉及的缓存管理、索引、算子与优化器和并发控制，正是我当前迫切需要的知识。于是前前后后花了两个月左右的时间完成了所有的project，同样是不希望把工夫浪费了，因此写个Blog记录一下。&lt;/p></description></item></channel></rss>