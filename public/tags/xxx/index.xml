<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xxx on SszgwDk</title>
    <link>http://localhost:1313/tags/xxx/</link>
    <description>Recent content in Xxx on SszgwDk</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 21 Jul 2024 21:47:37 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/xxx/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>New Post</title>
      <link>http://localhost:1313/posts/new-post/</link>
      <pubDate>Sun, 21 Jul 2024 21:47:37 +0800</pubDate>
      <guid>http://localhost:1313/posts/new-post/</guid>
      <description></description>
    </item>
    <item>
      <title>Tinykv_start</title>
      <link>http://localhost:1313/posts/tinykv_start/</link>
      <pubDate>Sun, 21 Jul 2024 21:29:39 +0800</pubDate>
      <guid>http://localhost:1313/posts/tinykv_start/</guid>
      <description>前段时间磕磕绊绊学习了Tinykv这个项目，通过所有测试就没再理了，现在觉得不能把工夫浪费了，因此写个Blog记录一下。&#xA;什么是Tinykv？ Tinykv是PingCAP推出的一个学习分布式系统的课程，这个公司在存储领域很厉害，比较著名的产品是TiDB。&#xA;Tinykv这个课程的具体内容是使用Raft共识算法构建一个具有分布式事务支持的键值存储系统，它提供了一些骨架代码，我们只需要填充其中的一些核心逻辑，例如Raft层实现共识，RaftStore实现消息处理等等。&#xA;整个课程有4个Project，分别为StandaloneKv、raftKv、MuiltiRaftKv、Transactions，整体难度上：porject3 &amp;gt; project2 &amp;raquo; project4 &amp;gt; project1。其中project2B和project3B是两个分水岭，一般都会Bug满天飞，需要打印详细的日志仔细地跟踪，并且有的Bug复现概率较低，要反复跑好几次，因此要坚持下来需要一定的毅力。&#xA;如果集中精力做的话，我了解到的几个同学都是暑假一个月不到的时间就完成了，整体代码量也不多，就是测试修Bug比较折磨。我当时还有学业上的别的事情，并没有太多的精力集中搞这个，从开始到完成花了有三个月，期间也是卡在2B和3B摆烂了很久。不过所幸是坚持到了最后。&#xA;如果时间凑巧的话，还可以报名PingCAP定期举办的tinykv学习营（Talent Plan | TiDB 社区），能起到一定的督促作用，还能与其他同学交流经验心得，可以少踩很多坑。&#xA;整个课程做下来能够学到的东西还是挺多的，例如raft共识算法、分布式系统架构、多版本并发控制等等，对于想走存储、分布式系统方向的同学还是很有用处的。&#xA;‍&#xA;资源链接 github仓库&#xA;talent-plan/tinykv：基于 TiKV 模型构建分布式键值服务的课程 (github.com)&#xA;讲解视频&#xA;Talent Plan 2021 KV 学习营分享课 (pingcap.com)&#xA;很有帮助的文章，Tinykv白皮书&#xA;如何快速通关 Talent Plan TinyKV？ - 知乎 (zhihu.com)&#xA;‍&#xA;环境搭建 tinykv对硬件稍微有点要求，否则跑得太慢又Bug满天飞心态很容易炸。我是使用14核处理器，32GB内存，SSD固态的笔记本，搭配wsl2的linux环境，运行起来非常流畅。固态据说是刚需，其他感觉与这差不多的配置或者低一点也没关系。非常推荐使用wsl，可以直接连接vscode非常快，环境配起来也嘎嘎轻松；用虚拟机也可以，不过我感觉有点慢。有配置好服务器的话更好，可以一直挂着跑。&#xA;附上我当时配置wsl2参考的博客&#xA;如何在Windows11上安装WSL2的Ubuntu22.04（包括换源）_wsl2换源_syqkali的博客-CSDN博客&#xA;由于项目用go实现，所以也要配置golang的运行环境，项目里还用到了make，我这里直接用apt安装即可&#xA;sudo apt update apt search golang-go sudo apt install golang-go go version sudo apt install make 接着从github仓库下载源码，得到的就是只有骨架代码的版本了。&#xA;​git clone https://github.com/talent-plan/tinykv.git​&#xA;建议在github上创建一个私有仓库来维护代码，这样就知道在哪些地方做了修改，并且可以很方便地恢复了。&#xA;‍&#xA;快速掌握Go语言基本语法 如果对Go语言的基本语法不熟悉，可以通过以下链接的教程快速掌握，对于Tinykv已经足够了。</description>
    </item>
  </channel>
</rss>
