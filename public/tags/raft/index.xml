<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Raft - 标签 - SszgwDk</title><link>https://sszgwdk.github.io/tags/raft/</link><description>Raft - 标签 - SszgwDk</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 15 Aug 2024 19:34:21 +0800</lastBuildDate><atom:link href="https://sszgwdk.github.io/tags/raft/" rel="self" type="application/rss+xml"/><item><title>TinyKV Project 4</title><link>https://sszgwdk.github.io/posts/tinykv_p4/</link><pubDate>Thu, 15 Aug 2024 19:34:21 +0800</pubDate><author>SszgwDk</author><guid>https://sszgwdk.github.io/posts/tinykv_p4/</guid><description>&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;p>Project 4 通过建立一个事务系统实现多版本并发控制 MVCC。在编码之前，需要对事务的相关概念提前了解（事务的属性，事务隔离级别等）。&lt;/p></description></item><item><title>TinyKV Project 3C</title><link>https://sszgwdk.github.io/posts/tinykv_p3c/</link><pubDate>Wed, 14 Aug 2024 12:04:47 +0800</pubDate><author>SszgwDk</author><guid>https://sszgwdk.github.io/posts/tinykv_p3c/</guid><description><![CDATA[<p>3c要求实现region balance调度器，文档给了详细的算法步骤，相对比较容易。</p>
<h2 id="processregionheartbeat">processRegionHeartbeat</h2>
<p>每个region都会周期性的发送心跳给调度器，调度器需要首先检查RegionEpoch是否是最新的，如果是则进行更新，否则忽略。</p>]]></description></item><item><title>TinyKV Project 3B 疑难杂症</title><link>https://sszgwdk.github.io/posts/tinykv_p3b_problems/</link><pubDate>Wed, 14 Aug 2024 12:03:17 +0800</pubDate><author>SszgwDk</author><guid>https://sszgwdk.github.io/posts/tinykv_p3b_problems/</guid><description>&lt;p>我在做tinykv这个课程的过程中，3b之前遇到的问题大多能在网上找到解决方法，因此也没怎么做记录；而3b由于引入了Multi Raft以及集群成员变更、Split Region等Admin命令，对很多细节处理要求严格，并且测试点会模拟丢包和网络隔离等异常情况，需要做较多额外的针对性处理，因此我在做的时候遇到了许多网上难以找到的问题，通过在海量日志中一步步跟踪才解决了它们。&lt;/p></description></item><item><title>TinyKV Project 3B</title><link>https://sszgwdk.github.io/posts/tinykv_p3b/</link><pubDate>Wed, 14 Aug 2024 11:56:22 +0800</pubDate><author>SszgwDk</author><guid>https://sszgwdk.github.io/posts/tinykv_p3b/</guid><description>&lt;p>project3b是整个tinykv中最难的部分，测试会出现很多问题，往往需要通过打印大量日志才能找到问题的原因，因此在编程时要尤其注意一些细节。不过调试这些Bug也是该项目的内容之一，锻炼发现问题解决问题的能力，加深对分布式kv引擎的认识。&lt;/p></description></item><item><title>TinyKV Project 3A</title><link>https://sszgwdk.github.io/posts/tinykv_p3a/</link><pubDate>Wed, 14 Aug 2024 11:55:35 +0800</pubDate><author>SszgwDk</author><guid>https://sszgwdk.github.io/posts/tinykv_p3a/</guid><description><![CDATA[<p>在Raft层实现领导者转移和成员变更（<strong>虽然Raft层实现简单，但是存在很多细节问题需要注意，后面3B的测试问题一半都来自Raft层</strong>）</p>
<h2 id="领导者转移">领导者转移</h2>
<p>HandleTransferLeader</p>]]></description></item><item><title>TinyKV Project 3 文档翻译</title><link>https://sszgwdk.github.io/posts/tinykv_p3_translate/</link><pubDate>Wed, 14 Aug 2024 11:36:06 +0800</pubDate><author>SszgwDk</author><guid>https://sszgwdk.github.io/posts/tinykv_p3_translate/</guid><description>&lt;h2 id="project-3-multiraftkv">Project 3 MultiRaftKV&lt;/h2>
&lt;p>在 Project2 中，你建立了一个基于Raft的高可用的kv服务器，做得很好！但还不够，这样的kv服务器是由单一的 raftGroup 支持的，不能无限扩展，并且每一个写请求都要等到提交后再逐一写入 badger，这是保证一致性的一个关键要求，但也扼杀了任何并发性。&lt;/p></description></item><item><title>TinyKV Project 2C</title><link>https://sszgwdk.github.io/posts/tinykv_p2c/</link><pubDate>Wed, 14 Aug 2024 11:33:26 +0800</pubDate><author>SszgwDk</author><guid>https://sszgwdk.github.io/posts/tinykv_p2c/</guid><description><![CDATA[<p>project2c目的是实现RaftLog GC和Snapshot支持。在Raft和raftstore中均需要修改和新增代码。</p>
<h2 id="问题分析">问题分析</h2>
<p>raft 一致性算法并没有考虑log无限增长的情况，若不做任何处理，随着系统的长时间运行，Raft节点中的RaftLog会占用大量内存；所以要引进applied index，把applied之前的条目定期压缩（compact）起来然后落盘，最后在内存删除它们，只需要记录最后applied的<code>Index、Term</code>​，以及一些状态。这就是RaftLog GC。</p>]]></description></item><item><title>TinyKV Project 2B</title><link>https://sszgwdk.github.io/posts/tinykv_p2b/</link><pubDate>Wed, 14 Aug 2024 11:27:36 +0800</pubDate><author>SszgwDk</author><guid>https://sszgwdk.github.io/posts/tinykv_p2b/</guid><description>&lt;h2 id="request执行流程和调用链分析">Request执行流程和调用链分析&lt;/h2>
&lt;p>梳理tinykv中Request执行流程和调用链有助于理解project2B文档的要求和需要实现的逻辑，推荐看一看Talent Plan学习营分享课的对应部分，里面对Request执行流程分析的很到位。&lt;/p></description></item><item><title>TinyKV Project 2B 文档翻译</title><link>https://sszgwdk.github.io/posts/tinykv_p2b_translate/</link><pubDate>Wed, 14 Aug 2024 11:12:24 +0800</pubDate><author>SszgwDk</author><guid>https://sszgwdk.github.io/posts/tinykv_p2b_translate/</guid><description>&lt;p>这几天想写tinykv project2B的思路，但是感觉内容太多不知道从何处写起。思来想去觉得可以先翻译一下project2B的文档，将比较关键的地方标注出来。&lt;/p></description></item><item><title>TinyKV Project 2A</title><link>https://sszgwdk.github.io/posts/tinykv_p2a/</link><pubDate>Wed, 14 Aug 2024 11:05:28 +0800</pubDate><author>SszgwDk</author><guid>https://sszgwdk.github.io/posts/tinykv_p2a/</guid><description><![CDATA[<p>project2需要实现一个基于raft算法的高可用kv服务器。根据文档，有三部分需要完成，包括：</p>
<ul>
<li>A：实现基本的 Raft 算法</li>
<li>B：在 Raft 之上构建容错 KV 服务器</li>
<li>C：新增 raftlog GC 和 snapshot 支持</li>
</ul>
<p>Project2A主要任务是实现Raft算法。</p>]]></description></item></channel></rss>